Assignment:
Extract, Transform, Load (ETL) process to extract daily weather forecast and observed weather data and load it into a live report
For each day at noon (local time), you will gather both the actual temperature and the temperature forecasted for noon on the following day for Casablanca, Morocco.
use the weather data package provided by the open source project wttr.in

use the curl command to scrape weather data via the wttr.in website. For example, to get data for Casablanca, enter:
curl wttr.in/casablanca

After completing this practice project, you will be able to apply your new shell scripting skills in a real-world scenario to:

Download raw weather data
Extract data of interest from the raw data
Transform the data as required
Load the data into a log file using a tabular format
Schedule the entire process to run automatically at a set time daily

Weather reporting tasks
You must extract and store the following data every day at noon, local time, for Casablanca, Morocco:

The actual temperature (in degrees Celsius)
The forecasted temperature (in degrees Celsius) for the following day at noon
Here is an example of what the the resulting weather report should look like:

year	month	day	obs_tmp	fc_temp
2023	1	1	10	11
2023	1	2	11	12
2023	1	3	12	10
2023	1	4	13	13
2023	1	5	10	9
2023	1	6	11	10

After completing this lab you will be able to create a Bash script to extract,
transform, and load weather data, schedule it to run daily, and write a script
to measure forecast accuracy.

Initialize your log file
Write a Bash script to download, extract, and load raw data into a report
Add some basic analytics to your report
Schedule your report to update daily
Measure and report on historical forecasting accuracy

STEPS: ( create folder: weather_project to put everything in)

1. Initialize weaterh report log file (create a text file called: rx_poc.log)
( text file will contain growing hx of daily weather data that is scraped)

In terminal: touch rx_poc.log

2. Add header to report delimited by tabs ( should be column names from table above)
Use the echo command with the -e option, and include tab separators \t in a string of names)
Use a shell variable and command substitution:

header=$(echo -e "year\tmonth\tday\tobs_temp\tfc_temp")
echo $header>weather_project/rx_poc.log

OR more directly, use echo and redirection:

echo -e "year\tmonth\tday\tobs_temp\tfc_temp">weather_project/rx_poc.log

3. Create a text file rx_poc.sh and make it an executable bash script
3.1 Create file: touch weather_project/rx_poc.sh
3.2 Add shebang on first line of file:

echo '#!/bin/bash' | cat - weather_project/rx_poc.sh
 > temp_file && mv temp_file weather_project/rx_poc.sh
 (this is best practice to add to temp file so don't corrupt original, put to temp and then replace original)

3.3 Make script executable by running following in terminal: chmod u+x rx_poc.sh
now you can run the file with the command:

./weather_project/rx_poc.sh

4. Assign a city variable to value Casablanca in terminal
city=Casablanca

5. Obtain weather info on Casablanca from url and save to file named weather_report
curl -s "wttr.in/$city?T" --output weather_project/weather_report

6. Create a script to report historical forecasting accuracy (compare to actual temps

7. Create a tab delimited file: historical_fc_accuracy.tsv
Add code to file to include headers:
echo -e "year\tmonth\tday\tobs_temp\tfc_temp\taccuracy\taccuracy_range" > historical_fc_accuracy.tsv

8. Create an executable Bash script: fc_accuracy.sh

9. Determnine dffferene btwn today's forecasted and actual temp
a. Extract the forecasted and observed temps for today and store in variable
( see fc_accuracy.sh script)

Exercise 5.5: Generalize to all days
Iterate through your weather log file using a for loop. On each iteration:
Use head and tail to extract consecutive pairs of lines on each iteration
This provides you with the current and previous day's data
Treat this pair of lines like you did in your code as yesterday and today's data
Perform your accuracy calulations as before
Use the correct row to extract date information
Append your resulting data to your historical forecast accuracy report

Exercise 6:
download a synthetic historical forecasting accuracy report and calculate some basic statistics based on the latest week of data.

First, create an executable bash script called: weekly_stats.sh
touch weekly_stats.sh
chmod +x weekly_stats.sh

6.1 download dataset from website (will create file: synthetic_historal_fc_accuracy.tsv)
wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMSkillsNetwork-LX0117EN-Coursera/labs/synthetic_historical_fc_accuracy.tsv

6.2 Load the historical accuracies into an array covering the last week of data
a. First extract the last week of data.
b. Store the values in a temporary file called scratch.txt. Write the contents of scratch.txt into an array called week_fc.
( see script in weekly_stats.sh)

6.3 Display min and max absolute forecasting errors for week
a. use the arry in scratch.txt
b. Now use your array to calculate the minimum and maximum absolute errors over the last week. For example, if you have a vaule of -1, change it to be 1.
Echo the minimum and maximum absolute errors to the terminal.
Check for any negative values in your array, and reassign these array entries with their positve counterparts.
Initialize two variables, minimum and maximum. Loop over the array values and modify these two variables as required.
( is bottom of script in weekly_stats.sh)
